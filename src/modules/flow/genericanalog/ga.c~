#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>

#include "sol-aio.h"
#include "sol-flow-internal.h"
#include "sol-flow.h"
#include "sol-mainloop.h"
#include "sol-util-internal.h"
#include "sol-types.h"
#include "ga.h"

struct _upm_generic_analog {
	struct sol_timeout *timer;
	struct sol_aio *aio;
	struct sol_flow_node *node;
	int	pin;
	int	mask;
	int	ret_data;
};

struct _upm_generic_analog*
upm_genericanalog_open(const char* pin, int mask, int pin_int){
	struct _upm_generic_analog *internal;
	internal->aio = sol_aio_open_by_label(pin, mask);
	SOL_NULL_CHECK_MSG(internal->aio, -EINVAL, "AIO : Couldn't be open. Maybe you used an invalid pin");
	internal->pin = pin_int;
	internal->mask = mask;
	return internal;
}

void
upm_genericanalog_close(struct _upm_generic_analog *internal_in){
	struct _upm_generic_analog *internal = internal_in;
	if (internal->aio)
        	sol_aio_close(internal->aio);
    	if (internal->timer)
        	sol_timeout_del(internal->timer);
}

static void 
read_cb(void *cb_data, struct sol_aio *aio, int32_t ret){
	struct _upm_generic_analog *mdata = cb_data;
	struct sol_irange val = {
		.min = 0,
		.max = 4094,
		.val = ret
    	};
	SOL_WRN("read value: %d", ret);
	SOL_WRN("read value: %d", val.step);
	mdata->ret_data = ret;
	sol_flow_send_irange_packet(mdata->node, SOL_FLOW_NODE_TYPE_GENERICANALOG__OUT__OUT, &val);
}

struct sol_aio_pending *
upm_genericanalog_read(struct _upm_generic_analog *internal_in){
	struct _upm_generic_analog *internal = internal_in;
	struct sol_aio_pending *pending;
	if (sol_aio_busy(internal->aio))
        	return NULL;

	pending = sol_aio_get_value(internal->aio, read_cb, internal);
	return pending;
}
